{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\wordcount\\\\wordcount\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useRef } from \"react\";\n\nfunction useWordGame(startingTime = 10) {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const _useState3 = useState(startingTime),\n        _useState4 = _slicedToArray(_useState3, 2),\n        timeRemaining = _useState4[0],\n        setTimeRemaining = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isTimeRunning = _useState6[0],\n        setIsTimeRunning = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        wordCount = _useState8[0],\n        setWordCount = _useState8[1];\n\n  const textBoxRef = useRef(null);\n  const results = wordCount;\n\n  function handleChange(e) {\n    const value = e.target.value;\n    setText(value);\n  }\n\n  function calculateWordCount(text) {\n    const wordsArr = text.trim().split(\" \");\n    return wordsArr.filter(word => word !== \"\").length;\n  }\n\n  function startGame() {\n    setIsTimeRunning(true);\n    setTimeRemaining(startingTime);\n    setText(\"\");\n    setWordCount(0);\n    textBoxRef.current.disabled = false;\n    textBoxRef.current.focus();\n  }\n\n  function endGame() {\n    setIsTimeRunning(false);\n    setWordCount(calculateWordCount(text));\n  }\n\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      endGame();\n    }\n  }, [timeRemaining, isTimeRunning]);\n  return {\n    textBoxRef,\n    handleChange,\n    text,\n    isTimeRunning,\n    timeRemaining,\n    startGame,\n    wordCount\n  };\n}\n\nexport default useWordGame;","map":{"version":3,"sources":["C:/Users/User/Desktop/wordcount/wordcount/src/useWordGame.js"],"names":["useState","useEffect","useRef","useWordGame","startingTime","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","results","handleChange","e","value","target","calculateWordCount","wordsArr","trim","split","filter","word","length","startGame","current","disabled","focus","endGame","setTimeout","time"],"mappings":";AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,QAA0C,OAA1C;;AAEA,SAASC,WAAT,CAAqBC,YAAY,GAAG,EAApC,EAAwC;AAAA,oBACZJ,QAAQ,CAAC,EAAD,CADI;AAAA;AAAA,QAC7BK,IAD6B;AAAA,QACvBC,OADuB;;AAAA,qBAEMN,QAAQ,CAACI,YAAD,CAFd;AAAA;AAAA,QAE7BG,aAF6B;AAAA,QAEdC,gBAFc;;AAAA,qBAGMR,QAAQ,CAAC,KAAD,CAHd;AAAA;AAAA,QAG7BS,aAH6B;AAAA,QAGdC,gBAHc;;AAAA,qBAIFV,QAAQ,CAAC,CAAD,CAJN;AAAA;AAAA,QAI7BW,SAJ6B;AAAA,QAIlBC,YAJkB;;AAKpC,QAAMC,UAAU,GAAGX,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMY,OAAO,GAAGH,SAAhB;;AAEA,WAASI,YAAT,CAAsBC,CAAtB,EAAyB;AAAA,UACdC,KADc,GACLD,CAAC,CAACE,MADG,CACdD,KADc;AAErBX,IAAAA,OAAO,CAACW,KAAD,CAAP;AACH;;AAED,WAASE,kBAAT,CAA4Bd,IAA5B,EAAkC;AAC9B,UAAMe,QAAQ,GAAGf,IAAI,CAACgB,IAAL,GAAYC,KAAZ,CAAkB,GAAlB,CAAjB;AACA,WAAOF,QAAQ,CAACG,MAAT,CAAgBC,IAAI,IAAIA,IAAI,KAAK,EAAjC,EAAqCC,MAA5C;AACH;;AAED,WAASC,SAAT,GAAqB;AACjBhB,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAF,IAAAA,gBAAgB,CAACJ,YAAD,CAAhB;AACAE,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAM,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,IAAAA,UAAU,CAACc,OAAX,CAAmBC,QAAnB,GAA8B,KAA9B;AACAf,IAAAA,UAAU,CAACc,OAAX,CAAmBE,KAAnB;AACH;;AAED,WAASC,OAAT,GAAmB;AACfpB,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAE,IAAAA,YAAY,CAACO,kBAAkB,CAACd,IAAD,CAAnB,CAAZ;AACH;;AAEDJ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGQ,aAAa,IAAIF,aAAa,GAAG,CAApC,EAAuC;AACnCwB,MAAAA,UAAU,CAAC,MAAM;AACbvB,QAAAA,gBAAgB,CAACwB,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAhB;AACH,OAFS,EAEP,IAFO,CAAV;AAGH,KAJD,MAIO,IAAGzB,aAAa,KAAK,CAArB,EAAwB;AAC3BuB,MAAAA,OAAO;AACV;AACJ,GARQ,EAQN,CAACvB,aAAD,EAAgBE,aAAhB,CARM,CAAT;AAUA,SAAO;AAACI,IAAAA,UAAD;AAAaE,IAAAA,YAAb;AAA2BV,IAAAA,IAA3B;AAAiCI,IAAAA,aAAjC;AAAgDF,IAAAA,aAAhD;AAA+DmB,IAAAA,SAA/D;AAA0Ef,IAAAA;AAA1E,GAAP;AACH;;AAED,eAAeR,WAAf","sourcesContent":["import {useState, useEffect, useRef} from \"react\"\r\n\r\nfunction useWordGame(startingTime = 10) {\r\n    const [text, setText] = useState(\"\")\r\n    const [timeRemaining, setTimeRemaining] = useState(startingTime)\r\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\r\n    const [wordCount, setWordCount] = useState(0)\r\n    const textBoxRef = useRef(null)\r\n    const results = wordCount;\r\n    \r\n    function handleChange(e) {\r\n        const {value} = e.target\r\n        setText(value)\r\n    }\r\n    \r\n    function calculateWordCount(text) {\r\n        const wordsArr = text.trim().split(\" \")\r\n        return wordsArr.filter(word => word !== \"\").length\r\n    }\r\n    \r\n    function startGame() {\r\n        setIsTimeRunning(true)\r\n        setTimeRemaining(startingTime)\r\n        setText(\"\")\r\n        setWordCount(0)\r\n        textBoxRef.current.disabled = false\r\n        textBoxRef.current.focus()\r\n    }\r\n    \r\n    function endGame() {\r\n        setIsTimeRunning(false)\r\n        setWordCount(calculateWordCount(text))\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(isTimeRunning && timeRemaining > 0) {\r\n            setTimeout(() => {\r\n                setTimeRemaining(time => time - 1)\r\n            }, 1000)\r\n        } else if(timeRemaining === 0) {\r\n            endGame()\r\n        }\r\n    }, [timeRemaining, isTimeRunning])\r\n    \r\n    return {textBoxRef, handleChange, text, isTimeRunning, timeRemaining, startGame, wordCount}\r\n}\r\n\r\nexport default useWordGame\r\n"]},"metadata":{},"sourceType":"module"}