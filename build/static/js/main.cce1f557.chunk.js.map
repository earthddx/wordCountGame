{"version":3,"sources":["useWordGame.js","App.js","serviceWorker.js","index.js"],"names":["useWordGame","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","result","setResult","useEffect","setTimeout","time","trim","split","filter","word","length","calculateWordCount","handleChange","e","value","target","startGame","current","disabled","focus","App","className","ref","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gKAiDeA,MA/Cf,WAAyC,IAApBC,EAAmB,uDAAJ,GAAI,EACZC,mBAAS,IADG,mBAC7BC,EAD6B,KACvBC,EADuB,OAEMF,mBAASD,GAFf,mBAE7BI,EAF6B,KAEdC,EAFc,OAGMJ,oBAAS,GAHf,mBAG7BK,EAH6B,KAGdC,EAHc,OAIFN,mBAAS,GAJP,mBAI7BO,EAJ6B,KAIlBC,EAJkB,KAK9BC,EAAaC,iBAAO,MALU,EAMRV,mBAAS,GAND,mBAM7BW,EAN6B,KAMrBC,EANqB,KA4CpC,OAXAC,qBAAU,WACHR,GAAiBF,EAAgB,EAChCW,YAAW,WACPV,GAAiB,SAAAW,GAAI,OAAIA,EAAO,OACjC,KACqB,IAAlBZ,IAVVG,GAAiB,GACjBE,EAhBJ,SAA4BP,GAExB,OADiBA,EAAKe,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAc/BC,CAAmBpB,IAChCW,EAAUL,MAYX,CAACJ,EAAeE,IAEZ,CAACM,SAAQF,aAAYa,aApC5B,SAAsBC,GAAI,IACfC,EAASD,EAAEE,OAAXD,MACPtB,EAAQsB,IAkC8BvB,OAAMI,gBAAeF,gBAAeuB,UA1B9E,WACIpB,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,IACRM,EAAa,GACbC,EAAWkB,QAAQC,UAAW,EAC9BnB,EAAWkB,QAAQE,SAoBkEtB,cCL9EuB,MAtCf,WAAgB,IAAD,EAUPhC,EAAY,GARZa,EAFO,EAEPA,OACAF,EAHO,EAGPA,WACAa,EAJO,EAIPA,aACArB,EALO,EAKPA,KACAI,EANO,EAMPA,cACAF,EAPO,EAOPA,cACAuB,EARO,EAQPA,UACAnB,EATO,EASPA,UAIJ,OACI,yBAAKwB,UAAU,QACX,gDACA,qDACA,8BACIC,IAAKvB,EACLwB,SAAUX,EACVE,MAAOvB,EACP2B,UAAWvB,IAEf,+CAAqBF,GACrB,4BACI+B,QAASR,EACTE,SAAUvB,GAFd,SAMA,2CAAiBE,GACjB,gDAAsBI,EAAtB,KAEA,wBAAIoB,UAAU,aAAd,gBCxBQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cce1f557.chunk.js","sourcesContent":["import {useState, useEffect, useRef} from \"react\"\r\n\r\nfunction useWordGame(startingTime = 10) {\r\n    const [text, setText] = useState(\"\")\r\n    const [timeRemaining, setTimeRemaining] = useState(startingTime)\r\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\r\n    const [wordCount, setWordCount] = useState(0)\r\n    const textBoxRef = useRef(null)\r\n    const [result, setResult] = useState(0) ;\r\n    \r\n    function handleChange(e) {\r\n        const {value} = e.target\r\n        setText(value)\r\n    }\r\n    \r\n    function calculateWordCount(text) {\r\n        const wordsArr = text.trim().split(\" \")\r\n        return wordsArr.filter(word => word !== \"\").length\r\n    }\r\n    \r\n    function startGame() {\r\n        setIsTimeRunning(true)\r\n        setTimeRemaining(startingTime)\r\n        setText(\"\")\r\n        setWordCount(0)\r\n        textBoxRef.current.disabled = false\r\n        textBoxRef.current.focus()\r\n    }\r\n    \r\n    function endGame() {\r\n        setIsTimeRunning(false)\r\n        setWordCount(calculateWordCount(text))\r\n        setResult(wordCount)\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(isTimeRunning && timeRemaining > 0) {\r\n            setTimeout(() => {\r\n                setTimeRemaining(time => time - 1)\r\n            }, 1000)\r\n        } else if(timeRemaining === 0) {\r\n            endGame()\r\n\r\n        }\r\n    }, [timeRemaining, isTimeRunning])\r\n    \r\n    return {result, textBoxRef, handleChange, text, isTimeRunning, timeRemaining, startGame, wordCount}\r\n}\r\n\r\nexport default useWordGame\r\n","import React from \"react\"\nimport useWordGame from \"./useWordGame\"\n\nfunction App() {\n    const {\n        result, \n        textBoxRef, \n        handleChange, \n        text, \n        isTimeRunning, \n        timeRemaining, \n        startGame, \n        wordCount\n    } = useWordGame(5)\n    \n    \n    return (\n        <div className=\"game\">\n            <h1>Word Typing Game</h1>\n            <h4>How fast do you type?</h4>\n            <textarea\n                ref={textBoxRef}\n                onChange={handleChange}\n                value={text}\n                disabled={!isTimeRunning}\n            />\n            <h3>Time remaining: {timeRemaining}</h3>\n            <button \n                onClick={startGame}\n                disabled={isTimeRunning}\n            >\n                Start\n            </button>\n            <h1>Word count: {wordCount}</h1> \n            <h4>previous result: {result} </h4>\n\n            <h3 className=\"watermark\">React App.</h3>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}